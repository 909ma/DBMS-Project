--개별 수정 프로시저

--비밀번호 업데이트 프로시저:
create or replace PROCEDURE update_password(
    p_id IN users.id%TYPE,
    p_new_password IN users.pw%TYPE
) AS
BEGIN
    UPDATE users SET pw = p_new_password WHERE id = p_id;
    COMMIT;
    DBMS_OUTPUT.PUT_LINE('Password updated successfully');
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error updating password: ' || SQLERRM);
        ROLLBACK;
END;
/
--이름 업데이트 프로시저:
CREATE OR REPLACE PROCEDURE update_name(
    p_id IN users.id%TYPE,
    p_new_name IN users.name%TYPE
) AS
BEGIN
    UPDATE users SET name = p_new_name WHERE id = p_id;
    COMMIT;
    DBMS_OUTPUT.PUT_LINE('Name updated successfully');
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error updating name: ' || SQLERRM);
        ROLLBACK;
END;
/
--전화번호1 업데이트 프로시저:
CREATE OR REPLACE PROCEDURE update_phone1(
    p_id IN users.id%TYPE,
    p_new_phone1 IN users.phone1%TYPE
) AS
BEGIN
    UPDATE users SET phone1 = p_new_phone1 WHERE id = p_id;
    COMMIT;
    DBMS_OUTPUT.PUT_LINE('Phone1 updated successfully');
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error updating phone1: ' || SQLERRM);
        ROLLBACK;
END;
/
--전화번호2 업데이트 프로시저:
CREATE OR REPLACE PROCEDURE update_phone2(
    p_id IN users.id%TYPE,
    p_new_phone2 IN users.phone2%TYPE
) AS
BEGIN
    UPDATE users SET phone2 = p_new_phone2 WHERE id = p_id;
    COMMIT;
    DBMS_OUTPUT.PUT_LINE('Phone2 updated successfully');
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error updating phone2: ' || SQLERRM);
        ROLLBACK;
END;
/
--거주지 업데이트 프로시저:
CREATE OR REPLACE PROCEDURE update_address(
    p_id IN users.id%TYPE,
    p_new_address IN users.address%TYPE
) AS
BEGIN
    UPDATE users SET address = p_new_address WHERE id = p_id;
    COMMIT;
    DBMS_OUTPUT.PUT_LINE('Address updated successfully');
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error updating address: ' || SQLERRM);
        ROLLBACK;
END;
/
--관심 과목 업데이트 프로시저:
CREATE OR REPLACE PROCEDURE update_interest(
    p_id IN users.id%TYPE,
    p_new_interest IN users.interest%TYPE
) AS
BEGIN
    UPDATE users SET interest = p_new_interest WHERE id = p_id;
    COMMIT;
    DBMS_OUTPUT.PUT_LINE('Interest updated successfully');
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error updating interest: ' || SQLERRM);
        ROLLBACK;
END;
/
--공부 시간대(hourStudy) 수정 프로시저
CREATE OR REPLACE PROCEDURE update_hourStudy(
    p_id IN users.id%TYPE,
    p_hourStudy IN users.hourStudy%TYPE
) AS
BEGIN
    UPDATE users
    SET hourStudy = p_hourStudy
    WHERE id = p_id;
    COMMIT;
    DBMS_OUTPUT.PUT_LINE('hourStudy updated successfully');
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error updating hourStudy: ' || SQLERRM);
        ROLLBACK;
END;
/
--자격증(certificate) 수정 프로시저
CREATE OR REPLACE PROCEDURE update_certificate(
    p_id IN users.id%TYPE,
    p_certificate IN users.certificate%TYPE
) AS
BEGIN
    UPDATE users
    SET certificate = p_certificate
    WHERE id = p_id;
    COMMIT;
    DBMS_OUTPUT.PUT_LINE('certificate updated successfully');
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error updating certificate: ' || SQLERRM);
        ROLLBACK;
END;
/
--학력(Education_level) 수정 프로시저

CREATE OR REPLACE PROCEDURE update_Education_level(
    p_id IN users.id%TYPE,
    p_Education_level IN users.Education_level%TYPE
) AS
BEGIN
    UPDATE users
    SET Education_level = p_Education_level
    WHERE id = p_id;
    COMMIT;
    DBMS_OUTPUT.PUT_LINE('Education_level updated successfully');
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error updating Education_level: ' || SQLERRM);
        ROLLBACK;
END;
/
--회원 등급(grade) 수정 프로시저
CREATE OR REPLACE PROCEDURE update_grade(
    p_id IN users.id%TYPE,
    p_grade IN users.grade%TYPE
) AS
BEGIN
    UPDATE users
    SET grade = p_grade
    WHERE id = p_id;
    COMMIT;
    DBMS_OUTPUT.PUT_LINE('grade updated successfully');
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error updating grade: ' || SQLERRM);
        ROLLBACK;
END;
/


